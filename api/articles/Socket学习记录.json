{"title":"Socket基础","uid":"514d1808d25e64b8077292b0b40d87f8","slug":"Socket学习记录","date":"2023-11-07T12:41:10.000Z","updated":"2024-12-08T14:02:09.078Z","comments":true,"path":"api/articles/Socket学习记录.json","keywords":null,"cover":[],"content":"<h1 id=\"Socket基础\"><a href=\"#Socket基础\" class=\"headerlink\" title=\"Socket基础\"></a>Socket基础</h1><h2 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h2><h4 id=\"1-Socket的初始化与连接操作\"><a href=\"#1-Socket的初始化与连接操作\" class=\"headerlink\" title=\"1. Socket的初始化与连接操作\"></a>1. Socket的初始化与连接操作</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Socket _socket;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Socket的初始化 参数1: 地址族(ipv4) 参数2: 套接字类型(流式传输) 参数3: 协议类型(TCP)</span></span><br><span class=\"line\">    _socket = <span class=\"keyword\">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, \tProtocolType.Tcp);</span><br><span class=\"line\">    <span class=\"comment\">// 连接服务器 参数1: 服务器地址 参数2: 服务器端口</span></span><br><span class=\"line\">    _socket.Connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6666</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-Socket的开始接收消息\"><a href=\"#2-Socket的开始接收消息\" class=\"headerlink\" title=\"2.  Socket的开始接收消息\"></a>2.  Socket的开始接收消息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_socket.BeginReceive方法和_socket.BeginAccept方法的区别：</span><br><span class=\"line\">_socket.BeginAccept()和_socket.BeginReceive()是用于异步操作的Socket方法，但它们的用途不同：</span><br><span class=\"line\">_socket.BeginAccept(): 开始异步操作以接受传入的连接尝试。通常用于服务器端，等待客户端连接。</span><br><span class=\"line\">_socket.BeginReceive(): 开始异步操作以从连接的Socket接收数据。通常用于客户端或服务器端，接收已经建立连接后的数据。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 消息的接收</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">StartReceive</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始接收消息</span></span><br><span class=\"line\">    <span class=\"comment\">// 参数分别是 接收缓冲区, 从第0个字节开始, 缓冲区的长度, 接收消息的方式, 回调函数, 回调函数的参数</span></span><br><span class=\"line\">    _socket.BeginReceive(_buffer, <span class=\"number\">0</span>, _buffer.Length, SocketFlags.None, ReceiveCallback, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若接收到了消息便会在这个回调函数里进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ReceiveCallback</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存放消息的长度</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = _socket.EndReceive(ar);</span><br><span class=\"line\">    <span class=\"comment\">// 如果消息长度为0, 说明客户端断开了连接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _socket.Close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将接收到的消息转换为字符串 参数1: 缓冲区 参数2: 从第0个字节开始 参数3: 消息长度</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> msg = System.Text.Encoding.UTF8.GetString(_buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    Debug.Log(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果像现在这样写，那么客户端只能接受一次来自服务端的消息并解析，如果服务端再发消息过来，客户端就不会再有响应了。</p>\n<p>因此我们需要在回调里面递归调用StartReceive()方法来确保客户端能响应后续服务端的消息。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 若接收到了消息便会在这个回调函数里进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ReceiveCallback</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存放消息的长度</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> len = _socket.EndReceive(ar);</span><br><span class=\"line\">    <span class=\"comment\">// 如果消息长度为0, 说明客户端断开了连接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _socket.Close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将接收到的消息转换为字符串 参数1: 缓冲区 参数2: 从第0个字节开始 参数3: 消息长度</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> msg = System.Text.Encoding.UTF8.GetString(_buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    Debug.Log(msg);</span><br><span class=\"line\">    <span class=\"comment\">// 继续接收消息</span></span><br><span class=\"line\">    StartReceive();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一来我们客户端的Socket的代码就创建好了。</p>\n<h2 id=\"服务端：\"><a href=\"#服务端：\" class=\"headerlink\" title=\"服务端：\"></a>服务端：</h2><p>服务端和客户端的处理流程大致相似，只是多了一步监听操作</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Sockets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Socket? _serverSocket = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">byte</span>[] Buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 参数1: 地址族(ipv4) 参数2: 套接字类型(流式传输) 参数3: 协议类型(TCP)</span></span><br><span class=\"line\">            _serverSocket = <span class=\"keyword\">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class=\"line\">            <span class=\"comment\">// 绑定服务器地址和端口</span></span><br><span class=\"line\">            <span class=\"comment\">// IPEndPoint是一个包含IP地址和端口号的类</span></span><br><span class=\"line\">            _serverSocket.Bind(<span class=\"keyword\">new</span> IPEndPoint(IPAddress.Any, <span class=\"number\">6666</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 开始监听 参数1: 最大连接数(同一时间最多有多少个客户端连接)</span></span><br><span class=\"line\">            _serverSocket.Listen(<span class=\"number\">0</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            StartAccept();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 阻止程序结束</span></span><br><span class=\"line\">            System.Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">StartAccept</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 开始接收客户端连接 参数1: 回调函数 参数2: 回调函数的参数</span></span><br><span class=\"line\">            _serverSocket?.BeginAccept(AcceptCallback, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 回调函数 当有客户端连接时会调用这个函数</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;ar&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">AcceptCallback</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取客户端的Socket EndAccept会返回一个Socket</span></span><br><span class=\"line\">            Socket? client = _serverSocket?.EndAccept(ar);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 处理客户端的消息</span></span><br><span class=\"line\">            StartReceive(client);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 和客户端同理, 继续接收消息</span></span><br><span class=\"line\">            StartAccept();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">StartReceive</span>(<span class=\"params\">Socket? client</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 开始接收消息</span></span><br><span class=\"line\">            <span class=\"comment\">// 参数分别是 接收缓冲区, 从第0个字节开始, 缓冲区的长度, 接收消息的方式, 回调函数, 回调函数的参数</span></span><br><span class=\"line\">            <span class=\"comment\">// 回调函数的参数要传入一个Socket, 方便回调函数处理不同的客户端的消息。如果不传入Socket, 那么回调函数就无法区分不同的客户端</span></span><br><span class=\"line\">            client?.BeginReceive(Buffer, <span class=\"number\">0</span>, Buffer.Length, SocketFlags.None, ReceiveCallback, client);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReceiveCallback</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取客户端的Socket 为null则抛出异常</span></span><br><span class=\"line\">            Socket? client = ar.AsyncState <span class=\"keyword\">as</span> Socket ?? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException();</span><br><span class=\"line\">            <span class=\"comment\">// 存放消息的长度</span></span><br><span class=\"line\">            <span class=\"built_in\">int</span> len = client.EndReceive(ar);</span><br><span class=\"line\">            <span class=\"comment\">// 如果消息长度为0, 说明客户端断开了连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                client.Close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">string</span> msg = System.Text.Encoding.UTF8.GetString(Buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            <span class=\"comment\">// 输出消息</span></span><br><span class=\"line\">            System.Console.WriteLine(msg);</span><br><span class=\"line\">            <span class=\"comment\">// 继续接收消息</span></span><br><span class=\"line\">            StartReceive(client);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>需要注意的是服务端接受到了客户端的Socket进行解析消息，使用的是客户端的Socket而不是服务端的Socket。</p>\n<p><code>StartReceive(client);</code> 被调用是为了开始从已连接的客户端接收数据。这个方法在客户端的套接字上启动一个异步读取操作。以下是逐步解释：</p>\n<ol>\n<li><strong>启动异步接收</strong>：在 <code>StartReceive(client)</code> 方法中调用 <code>client.BeginReceive</code>，这会启动一个异步操作来从客户端套接字读取数据。</li>\n<li><strong>缓冲区和回调</strong>：该方法指定了一个缓冲区来存储接收到的数据，并指定了一个回调方法 (<code>ReceiveCallback</code>) 来处理接收到的数据。</li>\n<li><strong>持续接收数据</strong>：通过在 <code>ReceiveCallback</code> 方法中再次调用 <code>StartReceive(client)</code>，服务器确保它继续监听来自客户端的更多数据。</li>\n</ol>\n<p>这样，服务器可以连续且异步地处理来自客户端的传入数据。</p>\n<h1 id=\"完善客户端：\"><a href=\"#完善客户端：\" class=\"headerlink\" title=\"完善客户端：\"></a>完善客户端：</h1><p>对客户端编写一个Send脚本来向服务器发送信息。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _socket.Send(Encoding.UTF8.GetBytes(<span class=\"string\">&quot;Hello Server&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Start</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Socket的初始化 参数1: 地址族(ipv4) 参数2: 套接字类型(流式传输) 参数3: 协议类型(TCP)</span></span><br><span class=\"line\">    _socket = <span class=\"keyword\">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class=\"line\">    <span class=\"comment\">// 连接服务器 参数1: 服务器地址 参数2: 服务器端口</span></span><br><span class=\"line\">    _socket.Connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6666</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 开始接收消息</span></span><br><span class=\"line\">    StartReceive();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">    Send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Start方法中，_socket.Connect(“127.0.0.1”, 6666);已经同步地连接到服务器。如果连接失败，会抛出异常，后续的代码不会执行。因此，在调用Send()方法时，可以确保已经成功连接到服务器。</p>\n<p>成功收到客户端发来的信息：</p>\n<p><img src=\"C:\\Users\\jay\\blog\\source\\images\\image-20241121162737121.png\" alt=\"image-20241121162737121\"></p>\n<p>如果要向客户端发送消息使用的也应该是客户端的Socket。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送消息到客户端</span></span><br><span class=\"line\">client.Send(System.Text.Encoding.UTF8.GetBytes(<span class=\"string\">&quot;Hello Client&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>客户端成功接受到消息：</p>\n<p><img src=\"C:\\Users\\jay\\blog\\source\\images\\image-20241121163659742.png\" alt=\"image-20241121163659742\"></p>\n<h1 id=\"socket联机游戏制作\"><a href=\"#socket联机游戏制作\" class=\"headerlink\" title=\"socket联机游戏制作\"></a>socket联机游戏制作</h1><h2 id=\"服务端如何管理客户端的连接和服务器消息解析\"><a href=\"#服务端如何管理客户端的连接和服务器消息解析\" class=\"headerlink\" title=\"服务端如何管理客户端的连接和服务器消息解析\"></a>服务端如何管理客户端的连接和服务器消息解析</h2><p>设计思路：总体流程和上文一致，但是将服务器的启动单独拆分为了 UnityServer类，将客户端的Socket拆分为了UnityClient类便于管理。当监听到有客户端连接进服务器时会new一个UnityClient, 所有的消息解析和服务器对客户端的数据流发送均由此类进行管理。对于存放消息流的buffer,单独维护一个Message类进行管理，该类将具有对消息的存放和对协议的解析(这里使用Protobuf)。</p>\n<p>UnityServer:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Sockets;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer.Servers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnityServer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务器的Socket</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket _serverSocket;</span><br><span class=\"line\">    <span class=\"comment\">// 客户端的列表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;UnityClient&gt; _unityClients = <span class=\"keyword\">new</span> List&lt;UnityClient&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构造函数 执行了构造函数服务器就正式启动</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnityServer</span>()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数 指定端口</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnityServer</span>(<span class=\"params\"><span class=\"built_in\">int</span> port</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _serverSocket = <span class=\"keyword\">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 进行绑定</span></span><br><span class=\"line\">        _serverSocket.Bind(<span class=\"keyword\">new</span> IPEndPoint(IPAddress.Any, port)); </span><br><span class=\"line\">        _serverSocket.Listen(<span class=\"number\">0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 开始应答处理客户端的连接</span></span><br><span class=\"line\">        StartAccept();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开始应答</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">StartAccept</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _serverSocket.BeginAccept(AcceptCallback, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 应答回调</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AcceptCallback</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Socket clientSocket = _serverSocket.EndAccept(ar);</span><br><span class=\"line\">        _unityClients.Add(<span class=\"keyword\">new</span> UnityClient(clientSocket));</span><br><span class=\"line\">        <span class=\"comment\">// 继续应答</span></span><br><span class=\"line\">        StartAccept();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UnityClient:</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Sockets;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnitySocketServer.Tools;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer.Servers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnityClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Socket _clientSocket;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Message _message;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnityClient</span>(<span class=\"params\">Socket clientSocket</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _clientSocket = clientSocket;</span><br><span class=\"line\">        _message = <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">        StartReceive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">StartReceive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _clientSocket.BeginReceive(_message.Buffer,_message.StartIndex,_message.Remsize, SocketFlags.None, ReceiveCallBack, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析的回调</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ReceiveCallBack</span>(<span class=\"params\">IAsyncResult ar</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(_clientSocket == <span class=\"literal\">null</span> || _clientSocket.Connected == <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> len = _clientSocket.EndReceive(ar);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            _message.ReadBuffer(len);</span><br><span class=\"line\">            StartReceive();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Message：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SocketGameProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer.Tools</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Message</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">byte</span>[] _buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 代表了buffer存到了第几位，主要是处理黏包的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> _startIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 外界获取_buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">byte</span>[] Buffer =&gt; _buffer;</span><br><span class=\"line\">    <span class=\"comment\">// 外界获取startIndex</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StartIndex =&gt; _startIndex;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 剩余的空间</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Remsize =&gt; _buffer.Length - _startIndex;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>解析消息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;len&quot;&gt;</span>没接收的消息长度<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReadBuffer</span>(<span class=\"params\"><span class=\"built_in\">int</span> len</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _startIndex += len;</span><br><span class=\"line\">        <span class=\"comment\">// 这个4是消息头的长度 4个字节 如果小于4说明消息头都没接收完或只有包头没有包体 包肯定不完整</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_startIndex &lt;= <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取消息的长度 是整段消息的长度，包括消息头和包体的长度。</span></span><br><span class=\"line\">        <span class=\"built_in\">int</span> count = BitConverter.ToInt32(_buffer, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_startIndex &gt;= (count + <span class=\"number\">4</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MainPack pack = (MainPack)MainPack.Descriptor.Parser.ParseFrom(_buffer, <span class=\"number\">4</span>, count);</span><br><span class=\"line\">                <span class=\"comment\">// 重置startIndex</span></span><br><span class=\"line\">                _startIndex -= (count + <span class=\"number\">4</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 将后面的消息前移</span></span><br><span class=\"line\">                Array.Copy(_buffer, count + <span class=\"number\">4</span>, _buffer, <span class=\"number\">0</span>, _startIndex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Protobuf脚本：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proto 版本</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> SocketGameProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发起者</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">RequestCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RequestNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 行为</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">ActionCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ActionNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回的结果</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">ReturnCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ReturnNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// message在Protocol Buffers（protobuf）中用于定义一个消息类型。</span></span><br><span class=\"line\"><span class=\"comment\">// 它类似于C#中的类或结构体，用于描述数据的结构。</span></span><br><span class=\"line\"><span class=\"comment\">// 每个message包含一个或多个字段，每个字段都有一个唯一的编号，用于在序列化和反序列化过程中标识字段。</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MainPack</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RequestCode requestCode = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ActionCode actionCode = <span class=\"number\">2</span>;</span><br><span class=\"line\">    ReturnCode returnCode = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> message = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"服务器框架：\"><a href=\"#服务器框架：\" class=\"headerlink\" title=\"服务器框架：\"></a>服务器框架：</h2><p>新建BaseController类来作为所有Controller的基类。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SocketGameProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer.Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseController</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 协议 发起行为的人的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> RequestCode requestCode;</span><br><span class=\"line\">    <span class=\"comment\">// 作为外部调用</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RequestCode RequestCode =&gt; requestCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建ControllerManager，用于管理与缓存所有的Controller</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> SocketGameProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">UnitySocketServer.Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ControllerManager</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存储所有的Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dictionary&lt;RequestCode, BaseController&gt; _controllerDic = <span class=\"keyword\">new</span> Dictionary&lt;RequestCode, BaseController&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化所有的Controller</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ControllerManager</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于Protobuf脚本添加相应的操作码，行为码和状态码</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proto 版本</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> SocketGameProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求的操作码</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">RequestCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RequestNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 用户</span></span><br><span class=\"line\">    User = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求的行为码</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">ActionCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ActionNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 注册</span></span><br><span class=\"line\">    Register = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 登录</span></span><br><span class=\"line\">    Login = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回的状态码</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">ReturnCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ReturnNone = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">    Succeed = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">    Fail = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// message在Protocol Buffers（protobuf）中用于定义一个消息类型。</span></span><br><span class=\"line\"><span class=\"comment\">// 它类似于C#中的类或结构体，用于描述数据的结构。</span></span><br><span class=\"line\"><span class=\"comment\">// 每个message包含一个或多个字段，每个字段都有一个唯一的编号，用于在序列化和反序列化过程中标识字段。</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">MainPack</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RequestCode requestCode = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ActionCode actionCode = <span class=\"number\">2</span>;</span><br><span class=\"line\">    ReturnCode returnCode = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> message = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建UserController，用于管理用户的注册、登录等行为。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","feature":true,"text":"Socket基础客户端：1. Socket的初始化与连接操作12345678910private Socket _socket; void Start()&#1...","permalink":"/post/Socket学习记录","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Unity网络开发","slug":"Unity网络开发","count":2,"path":"api/tags/Unity网络开发.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Socket%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">Socket基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%9A\"><span class=\"toc-text\">客户端：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Socket%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1. Socket的初始化与连接操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Socket%E7%9A%84%E5%BC%80%E5%A7%8B%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">2.  Socket的开始接收消息</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%9A\"><span class=\"toc-text\">服务端：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%96%84%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%9A\"><span class=\"toc-text\">完善客户端：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#socket%E8%81%94%E6%9C%BA%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C\"><span class=\"toc-text\">socket联机游戏制作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B6%88%E6%81%AF%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">服务端如何管理客户端的连接和服务器消息解析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A1%86%E6%9E%B6%EF%BC%9A\"><span class=\"toc-text\">服务器框架：</span></a></li></ol></li></ol>","author":{"name":"sasigiii","slug":"blog-author","avatar":"\\images\\头像.PNG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Sasigiii","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Pytorch深度学习引言","uid":"33f1db3ba8f93ed1537346a0403c58d0","slug":"Pytorch深度学习引言","date":"2023-11-07T12:41:10.000Z","updated":"2023-11-08T13:22:57.398Z","comments":true,"path":"api/articles/Pytorch深度学习引言.json","keywords":null,"cover":[],"text":"参数参数（parameter）可以被看做旋钮，旋钮的转动可以调整程序的行为。即可以通过改变参数来调节模型的行为。 模型任一调整参数后的程序被称为模型（model...","permalink":"/post/Pytorch深度学习引言","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Pytorch深度学习","slug":"Pytorch深度学习","count":1,"path":"api/tags/Pytorch深度学习.json"}],"author":{"name":"sasigiii","slug":"blog-author","avatar":"\\images\\头像.PNG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Sasigiii","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"前缀和","uid":"7e125c2fcf5388ca1ef0a457d9c6ee91","slug":"前缀和","date":"2023-11-07T12:41:10.000Z","updated":"2024-12-08T18:10:10.232Z","comments":true,"path":"api/articles/前缀和.json","keywords":null,"cover":null,"text":"前缀和一维前缀和1.定义 对于一维前缀和来说，前缀和是这个数组的某个下标之前的（包括当前下标对应的元素）所有元素之和。 声明一个数组 a[]。 数组 a[]的前...","permalink":"/post/前缀和","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"算法学习","slug":"算法学习","count":1,"path":"api/tags/算法学习.json"}],"author":{"name":"sasigiii","slug":"blog-author","avatar":"\\images\\头像.PNG","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Sasigiii","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"","customs":{}}}}}